name: 'CI'

on:
  push:
    branches:
      - main
      - astro
  pull_request:
    branches:
      - '**'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PUBLIC_TYPEKIT_ID: ${{ secrets.GATSBY_TYPEKIT_ID }}
  PUBLIC_MAPBOX_ACCESS_TOKEN: ${{ secrets.GATSBY_MAPBOX_ACCESS_TOKEN }}
  PUBLIC_UMAMI_SCRIPT_URL: ${{ secrets.GATSBY_UMAMI_SCRIPT_URL }}
  PUBLIC_UMAMI_WEBSITE_ID: ${{ secrets.GATSBY_UMAMI_WEBSITE_ID }}
  PUBLIC_INFURA_ID: ${{ secrets.GATSBY_INFURA_ID }}

jobs:
  test-unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-test-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-test-

      - run: npm ci
      - run: npm test

      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/

  test-e2e:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-e2e-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-e2e-

      - run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - run: npm run test:e2e

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        node: ['18']

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Cache node_modules & Astro build output
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/dist
          key: ${{ runner.os }}-${{ matrix.node }}-astro-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx', '**.astro') }}
          restore-keys: ${{ runner.os }}-${{ matrix.node }}-astro-build-${{ hashFiles('**/package-lock.json') }}-

      - run: npm ci
      - run: npm run build

      - uses: actions/upload-artifact@v1
        if: github.ref == 'refs/heads/main'
        with:
          name: dist
          path: dist

  coverage:
    runs-on: ubuntu-latest
    needs: [test-unit]
    if: ${{ success() && github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: coverage
      - uses: paambaati/codeclimate-action@v2.7.5
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  deploy:
    needs: [test-unit, test-e2e, build]
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v1
        with:
          name: dist
      - name: Deploy to S3
        run: npm run deploy:s3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
